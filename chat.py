import tkinter as tk
from tkinter import scrolledtext
from datetime import datetime
import csv
import smtplib
import re
import requests
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from groq import Groq

# API festivos Colombia
def es_festivo(fecha_str):
    try:
        a√±o = datetime.strptime(fecha_str, "%Y-%m-%d").year
        response = requests.get(f"https://date.nager.at/api/v3/PublicHolidays/{a√±o}/CO")
        festivos = [f["date"] for f in response.json()]
        return fecha_str in festivos
    except:
        return False

# Configuraci√≥n correo
CORREO_RECEPTOR = "johanalexischraferrerosa@gmail.com"
CORREO_REMITENTE = "johanalexischraferrerosa@gmail.com"
CLAVE_APP = "dopx appq revn wlny"

# Modelo de IA (Groq)
client = Groq(api_key="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")

# Estados globales
agendando_cita = False
esperando_cedula_para_agenda = False
datos_cita = {}
pasos = ["cedula", "nombre", "fecha", "hora", "sede", "correo"]
indice_paso = 0

# Validaciones
def validar_fecha(fecha_str):
    try:
        fecha = datetime.strptime(fecha_str, "%Y-%m-%d")
        if fecha.weekday() == 6 or es_festivo(fecha_str):
            return False
        return True
    except:
        return False

def validar_hora(hora_str, fecha_str):
    try:
        hora = datetime.strptime(hora_str, "%H:%M").time()
        dia = datetime.strptime(fecha_str, "%Y-%m-%d").weekday()
        if dia < 5:  # Lunes a viernes
            return datetime.strptime("06:00", "%H:%M").time() <= hora <= datetime.strptime("20:00", "%H:%M").time()
        elif dia == 5:  # S√°bado
            return datetime.strptime("06:00", "%H:%M").time() <= hora <= datetime.strptime("17:00", "%H:%M").time()
        return False
    except:
        return False

import tkinter as tk
from tkinter import scrolledtext
from datetime import datetime
import csv
import smtplib
import re
import requests
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from groq import Groq

# API festivos Colombia
def es_festivo(fecha_str):
    try:
        a√±o = datetime.strptime(fecha_str, "%Y-%m-%d").year
        response = requests.get(f"https://date.nager.at/api/v3/PublicHolidays/{a√±o}/CO")
        festivos = [f["date"] for f in response.json()]
        return fecha_str in festivos
    except:
        return False

# Configuraci√≥n correo
CORREO_RECEPTOR = "johanalexischraferrerosa@gmail.com"
CORREO_REMITENTE = "johanalexischraferrerosa@gmail.com"
CLAVE_APP = "dopx appq revn wlny"

# Modelo de IA (Groq)
client = Groq(api_key="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")

# Estados globales
agendando_cita = False
esperando_cedula_para_agenda = False
datos_cita = {}
pasos = ["cedula", "nombre", "fecha", "hora", "sede", "correo"]
indice_paso = 0

# Validaciones
def validar_fecha(fecha_str):
    try:
        fecha = datetime.strptime(fecha_str, "%Y-%m-%d")
        if fecha.weekday() == 6 or es_festivo(fecha_str):
            return False
        return True
    except:
        return False

def validar_hora(hora_str, fecha_str):
    try:
        hora = datetime.strptime(hora_str, "%H:%M").time()
        dia = datetime.strptime(fecha_str, "%Y-%m-%d").weekday()
        if dia < 5:  # Lunes a viernes
            return datetime.strptime("06:00", "%H:%M").time() <= hora <= datetime.strptime("20:00", "%H:%M").time()
        elif dia == 5:  # S√°bado
            return datetime.strptime("06:00", "%H:%M").time() <= hora <= datetime.strptime("17:00", "%H:%M").time()
        return False
    except:
        return False

# IA solo si es una consulta sobre dolor espec√≠fico
def get_ai_response(query):
    # Aqu√≠ no hay respuestas predefinidas, solo se consulta la IA de Groq
    completion = client.chat.completions.create(
        messages=[{"role": "user", "content": query}],
        model="llama-3.3-70b-versatile"
    )
    return completion.choices[0].message.content.strip()

# Guardar CSV y enviar
def guardar_y_enviar(datos):
    with open("citas.csv", "a", newline="") as f:
        writer = csv.writer(f)
        writer.writerow([datos["cedula"], datos["nombre"], datos["fecha"], datos["hora"], datos["sede"], datos["correo"]])

    msg = MIMEMultipart()
    msg["From"] = CORREO_REMITENTE
    msg["To"] = datos["correo"]
    msg["Subject"] = "Confirmaci√≥n de cita m√©dica"
    cuerpo = f"""Hola {datos['nombre']},

Tu cita ha sido agendada exitosamente con los siguientes datos:

üóì Fecha: {datos['fecha']}
‚è∞ Hora: {datos['hora']}
üìç Sede: {datos['sede']}
ü™™ C√©dula: {datos['cedula']}

¬°Gracias por confiar en nosotros!
"""
    msg.attach(MIMEText(cuerpo, "plain"))
    with smtplib.SMTP("smtp.gmail.com", 587) as server:
        server.starttls()
        server.login(CORREO_REMITENTE, CLAVE_APP)
        server.send_message(msg)

# Funci√≥n para mostrar citas por c√©dula
def mostrar_agenda(cedula):
    try:
        with open("citas.csv", "r") as f:
            reader = csv.reader(f)
            citas = list(reader)
        
        citas_filtradas = [cita for cita in citas if cita[0] == cedula]
        if citas_filtradas:
            agenda = "üìÖ Tus citas agendadas:\n\n"
            for cita in citas_filtradas:
                agenda += f"üóì {cita[2]} ‚è∞ {cita[3]} üìç {cita[4]}\n"
            chat_box.insert(tk.END, agenda + "\n")
        else:
            chat_box.insert(tk.END, "‚ùå No tienes citas agendadas.\n\n")
    except FileNotFoundError:
        chat_box.insert(tk.END, "‚ùå No se encontr√≥ el archivo de citas.\n\n")
# Nuevo estado para el modo conversaci√≥n con la IA
modo_ia_activo = False
historial_ia = []

# Procesar entrada del usuario
def procesar_entrada(user_input):
    global agendando_cita, indice_paso, datos_cita
    global esperando_cedula_para_agenda, modo_ia_activo, historial_ia

    user_input = user_input.strip()

    if user_input.lower() == "salir":
        if modo_ia_activo:
            modo_ia_activo = False
            historial_ia = []
            return "üëã Saliste del modo de conversaci√≥n con el asistente m√©dico. ¬øEn qu√© m√°s puedo ayudarte?"
        else:
            ventana.destroy()
            return "Saliendo del asistente. ¬°Hasta pronto! üëã"

    # Si estamos en conversaci√≥n activa con IA
    if modo_ia_activo:
        historial_ia.append({"role": "user", "content": user_input})
        completion = client.chat.completions.create(
            messages=historial_ia,
            model="llama-3.3-70b-versatile"
        )
        respuesta = completion.choices[0].message.content.strip()
        historial_ia.append({"role": "assistant", "content": respuesta})
        return respuesta

    if esperando_cedula_para_agenda:
        if not user_input.isdigit() or len(user_input) <= 4:
            return "‚ùå La c√©dula debe ser un n√∫mero de 4 d√≠gitos."
        mostrar_agenda(user_input)
        esperando_cedula_para_agenda = False
        return "‚úÖ Esa es tu agenda m√©dica actual."

    if user_input.lower() == "ver mi agenda":
        esperando_cedula_para_agenda = True
        return "Por favor, ingresa tu n√∫mero de c√©dula para mostrarte tus citas."

    if agendando_cita:
        paso = pasos[indice_paso]
        if paso == "cedula":
            if not user_input.isdigit() or len(user_input) <= 4:
                return "‚ùå La c√©dula debe tener 4 d√≠gitos."
            datos_cita["cedula"] = user_input
            respuesta = "¬øCu√°l es tu nombre completo?"
        elif paso == "nombre":
            datos_cita["nombre"] = user_input
            respuesta = "¬øQu√© fecha deseas? (AAAA-MM-DD)"
        elif paso == "fecha":
            if not validar_fecha(user_input):
                return "‚ùå Fecha inv√°lida o no disponible. Intenta otra."
            datos_cita["fecha"] = user_input
            respuesta = "¬øA qu√© hora deseas la cita? (HH:MM)"
        elif paso == "hora":
            if not validar_hora(user_input, datos_cita["fecha"]):
                return "‚ùå Hora fuera del horario de atenci√≥n."
            datos_cita["hora"] = user_input
            respuesta = "¬øEn qu√© ciudad deseas la cita? (Cali o Bogot√°)"
        elif paso == "sede":
            if user_input.lower() not in ["cali", "bogota", "bogot√°"]:
                return "Solo tenemos sedes en Cali y Bogot√°."
            datos_cita["sede"] = user_input.title()
            respuesta = "¬øA qu√© correo deseas que enviemos la confirmaci√≥n?"
        elif paso == "correo":
            if not re.match(r"[^@]+@[^@]+\.[^@]+", user_input):
                return "‚ùå Correo inv√°lido."
            datos_cita["correo"] = user_input
            guardar_y_enviar(datos_cita)
            agendando_cita = False
            indice_paso = 0
            datos_cita = {}
            return "‚úÖ ¬°Cita agendada y confirmaci√≥n enviada por correo!"
        indice_paso += 1
        return respuesta

    if re.search(r"agendar|cita", user_input, re.IGNORECASE):
        agendando_cita = True
        indice_paso = 0
        datos_cita = {}
        return "Perfecto, primero, ¬øcu√°l es tu n√∫mero de c√©dula?"

    # Activar modo conversaci√≥n IA si el mensaje empieza con "me duele"
    if user_input.lower().startswith("me duele"):
        partes_cuerpo = ["garganta", "est√≥mago", "cabeza", "pierna", "brazo", "espalda", "cuello", "mu√±eca", "dedo"]
        if any(parte in user_input.lower() for parte in partes_cuerpo):
            modo_ia_activo = True
            historial_ia = [{"role": "user", "content": user_input}]
            completion = client.chat.completions.create(
                messages=historial_ia,
                model="llama-3.3-70b-versatile"
            )
            respuesta = completion.choices[0].message.content.strip()
            historial_ia.append({"role": "assistant", "content": respuesta})
            return respuesta + "\n\nüí¨ Puedes seguir preguntando. Escribe 'salir' para volver al asistente principal."
        else:

            return "‚ùå No se detect√≥ una parte del cuerpo v√°lida. ¬øPuedes especificar mejor el dolor?"
        
    if any(palabra in user_input.lower() for palabra in ["desmayo", "descompensaci√≥n", "colapso"]):
        modo_ia_activo = True
        historial_ia = [{"role": "user", "content": user_input}]
        completion = client.chat.completions.create(
            messages=historial_ia,
            model="llama-3.3-70b-versatile"
        )
        respuesta = completion.choices[0].message.content.strip()
        historial_ia.append({"role": "assistant", "content": respuesta})
        return respuesta + "\n\nüí¨ Puedes seguir preguntando. Escribe 'salir' para volver al asistente principal."        

    return "‚ùå Lo siento, no entiendo la consulta. ¬øEn qu√© m√°s puedo ayudarte?"

# GUI
ventana = tk.Tk()
ventana.title("Asistente M√©dico")
chat_box = scrolledtext.ScrolledText(ventana, wrap=tk.WORD)
chat_box.pack(padx=10, pady=10)

entry = tk.Entry(ventana, width=80)
entry.pack(padx=10, pady=(0, 10))

# Enviar mensaje
def send_message():
    user_input = entry.get()
    chat_box.insert(tk.END, "T√∫: " + user_input + "\n")
    entry.delete(0, tk.END)
    respuesta = procesar_entrada(user_input)
    chat_box.insert(tk.END, "Asistente: " + respuesta + "\n\n")

# Bot√≥n para enviar
boton_enviar = tk.Button(ventana, text="Enviar", command=send_message)
boton_enviar.pack(pady=(0, 10))

chat_box.insert(tk.END, "Asistente: ¬°Hola! üëã Bienvenido al Centro M√©dico Buena F√© üè•.\nEstoy aqu√≠ para ayudarte. Puedes:\n- Agendar una cita üìÖ\n- Ver tu agenda üóì (escribe 'ver mi agenda')\n\n¬øEn qu√© puedo ayudarte hoy?\n\n")

ventana.mainloop()
